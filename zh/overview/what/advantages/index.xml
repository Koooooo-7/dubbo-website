<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – 核心特性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/</link><description>Recent content in 核心特性 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://static.dubbo.apache.org:8080/zh/overview/what/advantages/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: 易用性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/usability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/usability/</guid><description>
&lt;p>Dubbo 通过提供面向开发开发侧的编程框架和一系列服务治理套件，极大的简化了微服务构建的复杂度。从开发层面，Dubbo 通过针对不同语言实现定义了一套微服务开发范式，并提供了配套脚手架用于快速搭建微服务项目骨架；从部署上来说，Dubbo 应用可以打包部署，Dubbo 提供了多种；Dubbo 服务治理是真正从解决微服务生产实践问题的角度出发，提供了除服务发现等能力之外的高阶特性。&lt;/p>
&lt;h2 id="开发">开发&lt;/h2>
&lt;p>Dubbo 提供了用于快速生成微服务项目脚手架的配套工具（浏览器页面或命令行工具），只需要告诉脚手架你期望包含的功能或组件，脚手架最终可以帮助开发者生成具有合理和必要依赖的工程，里面包含必要的第三方依赖、默认配置等，开发者只需要在特定的位置编写业务逻辑，并通过 Dubbo 特有的方式定义和发布服务即可。&lt;/p>
&lt;p>&lt;img src="" alt="脚手架示例图">&lt;/p>
&lt;p>Dubbo 并没有发明一套全新的应用开发模式，而是与业界主流的应用开发框架整合，让开发者可以用流行的应用开发框架开发 Dubbo 应用 &amp;mdash; Dubbo 提供了与应用开发框架模式相匹配的 RPC 服务开发模式。&lt;/p>
&lt;p>这点我们通过 Java 体系的 Spring Boot 解释过，如果开发者选择基于 Spring/Spring Boot 开发微服务，则 Dubbo 就是构建在 Spring Boot 之上的服务开发框架，这里还是以 Spring Boot 为基础的 Dubbo 应用开发为例，只需要增加相应的注解和配置文件就可以了。&lt;/p>
&lt;p>增加 Spring Boot 风格的注解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@SpringBootApplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@EnableDubbo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">public&lt;/span> &lt;span style="color:#268bd2">class&lt;/span> &lt;span style="color:#268bd2">ProviderApplication&lt;/span> &lt;span style="color:#719e07">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@DubboService&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">public&lt;/span> &lt;span style="color:#268bd2">class&lt;/span> &lt;span style="color:#268bd2">DemoServiceImpl&lt;/span> &lt;span style="color:#268bd2">implements&lt;/span> DemoService &lt;span style="color:#719e07">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>application.yml&lt;/code> 配置文件中增加配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">application&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">name&lt;/span>: dubbo-demo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">protocol&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">name&lt;/span>: dubbo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">port&lt;/span>: -&lt;span style="color:#2aa198">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">registry&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">address&lt;/span>: zookeeper://127.0.0.1:2181
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于具体语言的脚手架、开发体验可参见：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">Dubbo Java 开发指南&lt;/a>&lt;/li>
&lt;li>&lt;a href="">Dubbo Golang 开发指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>分布式系统中服务组件由不同团队负责开发，服务间如何透明、高效协作是非常影响开发效率的问题，这包括 API 管理、服务测试、服务静态观测等，Dubbo 对此类场景都提供了一些有用的配套工具。关于服务 API 管理，服务查询、测试、Mock 等，可参加 &lt;a href="">Dubbo-Amin&lt;/a> 的详细描述。&lt;/p>
&lt;ul>
&lt;li>Dubbo 提供了类似 Swagger 的 API 管理工具，而对于 IDL 也将开源对应的管理工具&lt;/li>
&lt;li>支持服务测试&lt;/li>
&lt;li>支持服务 Mock&lt;/li>
&lt;li>Admin 服务查询&lt;/li>
&lt;/ul>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>Dubbo 原生服务可打包部署到 Docker 容器、Kubernetes、Service Mesh 等云原生基础设施和微服务架构。&lt;/p>
&lt;p>对 Docker 部署环境，Dubbo 服务最需要解决的就是注册 IP 地址与通信 IP 地址统一的问题，对于这点&lt;/p>
&lt;p>对于 Kubernetes 部署环境，有两种模式
Kubernetes Native Service&lt;/p>
&lt;p>对于 Service Mesh 架构，&lt;/p>
&lt;p>关于不同环境的部署示例，可参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">部署 Dubbo 服务到 Docker 容器&lt;/a>&lt;/li>
&lt;li>&lt;a href="">部署 Dubbo 服务到 Kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="">部署 Dubbo 服务到 Service Mesh&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="治理">治理&lt;/h2>
&lt;p>Dubbo 提供了丰富的服务治理能力，对于绝大多数用户来说，Dubbo 原生提供的服务治理定义与实现 (服务发现、负载均衡等) 就能满足微服务实践诉求，开发者只需要做两步使用服务治理&lt;/p>
&lt;p>&lt;strong>1. 配置一条注册中心地址&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">registry&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">address&lt;/span>: zookeeper://127.0.0.1:2181
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务消费端、提供端都在 dubbo 配置文件中增加以上配置（以 yaml 格式为例），消费端就能自动发现并对提供端地址发起服务调用，将默认采用基于权重的随机负载均衡，且包含超时、失败重试等默认策略。&lt;/p>
&lt;p>&lt;strong>2. 打开 Dubbo Admin 观测服务运行状态&lt;/strong>&lt;/p>
&lt;p>&lt;img src="" alt="Dubbo Admin 运行状态截图">&lt;/p>
&lt;p>服务的基本信息、调用数据等会如上图展示在 Dubbo Admin 之上。&lt;/p>
&lt;p>对于更复杂的微服务实践场景，Dubbo 还提供了更多高级的服务治理特性，包括&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">流量治理&lt;/a>&lt;/li>
&lt;li>&lt;a href="">动态配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="">限流降级&lt;/a>&lt;/li>
&lt;li>&lt;a href="">数据一致性&lt;/a>&lt;/li>
&lt;li>&lt;a href="">可观测性&lt;/a>&lt;/li>
&lt;li>&lt;a href="">多协议&lt;/a>&lt;/li>
&lt;li>&lt;a href="">多注册中心&lt;/a>&lt;/li>
&lt;li>&lt;a href="">Dubbo Mesh&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Overview: 高性能</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/performance/</guid><description>
&lt;p>Dubbo 被设计用于解决阿里巴巴超大规模的电商微服务集群实践，并在各个行业头部企业经过多年的十万、百万规模的微服务实践检验，因此，Dubbo 在通信性能、稳定性方面具有无可比拟的优势，非常适合构建近乎无限水平伸缩的微服务集群，这也是 Dubbo 从实践层面优于业界很多同类的产品的一大巨大优势。&lt;/p>
&lt;h2 id="高性能数据传输">高性能数据传输&lt;/h2>
&lt;p>Dubbo 内置支持 Dubbo2、Triple (兼容 gRPC) 两款高性能通信协议。其中&lt;/p>
&lt;ul>
&lt;li>Dubbo2 是基于 TCP 传输协议之上构建的二进制私有 RPC 通信协议，是一款非常简单、紧凑、高效的通信协议。&lt;/li>
&lt;li>Triple 是基于 HTTP/2 应用层协议之上构建新一代 RPC 通信协议，在网关穿透性、通用性以及 Streaming 通信上都具备优势，同时 Triple 在完全兼容 gRPC 协议的同时，在实现上更具性能优势。&lt;/li>
&lt;/ul>
&lt;p>Dubbo2 benchmark 性能指标&lt;/p>
&lt;p>&lt;img src="" alt="Dubbo2">&lt;/p>
&lt;p>Triple benchmark 性能指标&lt;/p>
&lt;p>&lt;img src="" alt="Triple">&lt;/p>
&lt;p>通过以下内容了解更多协议详情：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../../../core-features/protocols">Dubbo 协议支持详情&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="构建可伸缩的微服务集群">构建可伸缩的微服务集群&lt;/h2>
&lt;p>业务增长带来了集群规模的快速增长，而集群规模的增长会对服务治理架构带来挑战，这包括注册中心的存储容量、节点动态变化带来的地址推送与解析效率、高效的网络链接管理、高峰期的流量无损上下线、异常节点的自动节点管理、消费端存储大量网络地址的资源开销等。&lt;/p>
&lt;p>以上很多点都直接关系到了微服务集群的稳定性，因此很容易成为影响集群和业务增长的瓶颈，当集群规模变得越大，问题带来的影响面也就越会被进一步放大。很多开发者可能会想只有几个应用而已，当前不需要并不关心集群规模，但作为技术架构选型的关键因素之一，我们还是要充分考虑微服务集群。并且基于我们对业界大量微服务架构和框架实现的调研，大部分产品的性能瓶颈点可能很快就会到来（一些产品所能高效支持的瓶颈节点规模阈值都是非常低的，比如几十个应用、数百个节点）。&lt;/p>
&lt;p>&lt;img src="" alt="一份对比的 Dubbo、Spring Cloud、Go-Micro、Istio 在不同集群规模下的资源咋用 benchmark，比如模拟10个节点、100个节点、1000 个节点情况下的资源占用情况">&lt;/p>
&lt;p>Dubbo 的优势在于&lt;/p>
&lt;p>通过以下内容了解 Dubbo 构建生产可用的、可伸缩的大规模微服务集群背后的原理：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">Dubbo3 服务发现模型&lt;/a>&lt;/li>
&lt;li>&lt;a href="">流量管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="">源码解析&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Overview: 流量治理</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/traffic-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/traffic-management/</guid><description>
&lt;p>按标签的条件路由&lt;/p>
&lt;p>Service Mesh 路由&lt;/p>
&lt;p>路由规则可扩展&lt;/p>
&lt;ul>
&lt;li>超时&lt;/li>
&lt;li>重试&lt;/li>
&lt;li>限流&lt;/li>
&lt;li>降级&lt;/li>
&lt;li>Mock&lt;/li>
&lt;li>集群容错&lt;/li>
&lt;li>无损上下线&lt;/li>
&lt;li>异常链接管理&lt;/li>
&lt;/ul></description></item><item><title>Overview: 可观测性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/observability/</guid><description>
&lt;p>Istio generates detailed telemetry for all service communications within a mesh. This telemetry provides observability of service behavior, empowering operators to troubleshoot, maintain, and optimize their applications – without imposing any additional burdens on service developers. Through Istio, operators gain a thorough understanding of how monitored services are interacting, both with other services and with the Istio components themselves.&lt;/p>
&lt;p>可观测性分为三个维度度量、链路追踪以及日志，Dubbo从这三个方面为开发者提供了全面的可观测性解决方案。&lt;/p>
&lt;p>Metrics：Dubbo集成了prometheus监控系统，在指标数据上Dubbo支持多维度的RT指标数据，包括Max、Min、Avg、P99、P95等维度，支持多维度的请求量指标数据，包括QPS、调用成功的请求量、调用失败的请求量等。除此之外，Dubbo还能够通过SPI扩展来完成集成其他监控系统。&lt;/p>
&lt;p>Tracing：Dubbo提供了链路追踪所需的必备数据，为Dubbo集成各类链路追踪系统提供了便捷，以辅助用户完成更加强大的链路追踪能力。目前流行的skywalking、zipkin、jaeger都支持Dubbo服务的链路追踪。&lt;/p>
&lt;p>Logging：Dubbo支持多种的日志框架的适配。包括常见的slf4j、log4j2、log4j、jcl等。用户可以在这些框架中自由切换。&lt;/p></description></item><item><title>Overview: 可扩展性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/extensibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/extensibility/</guid><description>
&lt;h2 id="扩展设计理念">扩展设计理念&lt;/h2>
&lt;p>可扩展性是任何一个系统所追求的，对于 Dubbo 来说是同样适用。&lt;/p>
&lt;h3 id="什么是可扩展性">什么是可扩展性&lt;/h3>
&lt;p>可扩展性是一种设计理念，代表了我们对未来的一种预想，我们希望在现有的架构或设计基础上，当未来某些方面发生变化的时候，我们能够以最小的改动来适应这种变化。&lt;/p>
&lt;h3 id="可扩展性的优点">可扩展性的优点&lt;/h3>
&lt;p>可扩展性的优点主要表现模块之间解耦，它符合开闭原则，对扩展开放，对修改关闭。当系统增加新功能时，不需要对现有系统的结构和代码进行修改，仅仅新增一个扩展即可。&lt;/p>
&lt;h3 id="扩展实现方式">扩展实现方式&lt;/h3>
&lt;p>一般来说，系统会采用 Factory、IoC、OSGI 等方式管理扩展(插件)生命周期。考虑到 Dubbo 的适用面，不想强依赖 Spring 等 IoC 容器。
而自己造一个小的 IoC 容器，也觉得有点过度设计，所以选择最简单的 Factory 方式管理扩展(插件)。在 Dubbo 中，所有内部实现和第三方实现都是平等的。&lt;/p>
&lt;h3 id="dubbo-中的可扩展性">Dubbo 中的可扩展性&lt;/h3>
&lt;ul>
&lt;li>平等对待第三方的实现。在 Dubbo 中，所有内部实现和第三方实现都是平等的，用户可以基于自身业务需求，替换 Dubbo 提供的原生实现。&lt;/li>
&lt;li>每个扩展点只封装一个变化因子，最大化复用。每个扩展点的实现者，往往都只是关心一件事。如果用户有需求需要进行扩展，那么只需要对其关注的扩展点进行扩展就好，极大的减少用户的工作量。&lt;/li>
&lt;/ul>
&lt;h2 id="dubbo-扩展的特性">Dubbo 扩展的特性&lt;/h2>
&lt;p>Dubbo 中的扩展能力是从 JDK 标准的 SPI 扩展点发现机制加强而来，它改进了 JDK 标准的 SPI 以下问题：&lt;/p>
&lt;ul>
&lt;li>JDK 标准的 SPI 会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源。&lt;/li>
&lt;li>如果扩展点加载失败，连扩展点的名称都拿不到了。比如：JDK 标准的 ScriptEngine，通过 getName() 获取脚本类型的名称，但如果 RubyScriptEngine 因为所依赖的 jruby.jar 不存在，导致 RubyScriptEngine 类加载失败，这个失败原因被吃掉了，和 ruby 对应不起来，当用户执行 ruby 脚本时，会报不支持 ruby，而不是真正失败的原因。&lt;/li>
&lt;/ul>
&lt;p>用户能够基于 Dubbo 提供的扩展能力，很方便基于自身需求扩展其他协议、过滤器、路由等。下面介绍下 Dubbo 扩展能力的特性。&lt;/p>
&lt;ul>
&lt;li>按需加载。Dubbo 的扩展能力不会一次性实例化所有实现，而是用哪个扩展类则实例化哪个扩展类，减少资源浪费。&lt;/li>
&lt;li>增加扩展类的 IOC 能力。Dubbo 的扩展能力并不仅仅只是发现扩展服务实现类，而是在此基础上更进一步，如果该扩展类的属性依赖其他对象，则 Dubbo 会自动的完成该依赖对象的注入功能。&lt;/li>
&lt;li>增加扩展类的 AOP 能力。Dubbo 扩展能力会自动的发现扩展类的包装类，完成包装类的构造，增强扩展类的功能。&lt;/li>
&lt;li>具备动态选择扩展实现的能力。Dubbo 扩展会基于参数，在运行时动态选择对应的扩展类，提高了 Dubbo 的扩展能力。&lt;/li>
&lt;li>可以对扩展实现进行排序。能够基于用户需求，指定扩展实现的执行顺序。&lt;/li>
&lt;li>提供扩展点的 Adaptive 能力。该能力可以使的一些扩展类在 consumer 端生效，一些扩展类在 provider 端生效。&lt;/li>
&lt;/ul>
&lt;p>从 Dubbo 扩展的设计目标可以看出，Dubbo 实现的一些例如动态选择扩展实现、IOC、AOP 等特性，能够为用户提供非常灵活的扩展能力。&lt;/p>
&lt;h2 id="dubbo-扩展加载流程">Dubbo 扩展加载流程&lt;/h2>
&lt;p>Dubbo 加载扩展的整个流程如下：&lt;/p>
&lt;p>&lt;img src="http://static.dubbo.apache.org:8080/imgs/v3/concepts/extension-load.png" alt="//imgs/v3/concepts/extension-load.png">&lt;/p>
&lt;p>主要步骤为 4 个：&lt;/p>
&lt;ul>
&lt;li>读取并解析配置文件&lt;/li>
&lt;li>缓存所有扩展实现&lt;/li>
&lt;li>基于用户执行的扩展名，实例化对应的扩展实现&lt;/li>
&lt;li>进行扩展实例属性的 IOC 注入以及实例化扩展的包装类，实现 AOP 特性&lt;/li>
&lt;/ul>
&lt;h2 id="如何使用-dubbo-扩展能力进行扩展">如何使用 Dubbo 扩展能力进行扩展&lt;/h2>
&lt;p>下面以扩展协议为例进行说明如何利用 Dubbo 提供的扩展能力扩展 Triple 协议。&lt;/p>
&lt;p>(1) 在协议的实现 jar 包内放置文本文件：META-INF/dubbo/org.apache.dubbo.remoting.api.WireProtocol&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>tri=org.apache.dubbo.rpc.protocol.tri.TripleHttp2Protocol
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(2) 实现类内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@Activate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">public&lt;/span> &lt;span style="color:#268bd2">class&lt;/span> &lt;span style="color:#268bd2">TripleHttp2Protocol&lt;/span> &lt;span style="color:#268bd2">extends&lt;/span> Http2WireProtocol &lt;span style="color:#719e07">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#586e75">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span>&lt;span style="color:#719e07">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明下：Http2WireProtocol 实现了 WireProtocol 接口&lt;/p>
&lt;p>(3) Dubbo 配置模块中，扩展点均有对应配置属性或标签，通过配置指定使用哪个扩展实现。比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&amp;lt;dubbo:protocol name=&amp;#34;tri&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的扩展步骤可以看出，用户基本在黑盒下就完成了扩展。&lt;/p>
&lt;h2 id="dubbo-扩展的应用">Dubbo 扩展的应用&lt;/h2>
&lt;p>Dubbo 的扩展能力非常灵活，在自身功能的实现上无处不在。&lt;/p>
&lt;p>&lt;img src="http://static.dubbo.apache.org:8080/imgs/v3/concepts/extension-use.png" alt="//imgs/v3/concepts/extension-use.png">&lt;/p>
&lt;p>Dubbo 扩展能力使得 Dubbo 项目很方便的切分成一个一个的子模块，实现热插拔特性。用户完全可以基于自身需求，替换 Dubbo 原生实现，来满足自身业务需求。&lt;/p>
&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;ul>
&lt;li>如果你需要自定义负载均衡策略，你可以使用 Dubbo 扩展能力。&lt;/li>
&lt;li>如果你需要实现自定义的注册中心，你可以使用 Dubbo 扩展能力。&lt;/li>
&lt;li>如果你需要实现自定义的过滤器，你可以使用 Dubbo 扩展能力。&lt;/li>
&lt;/ul>
&lt;p>Dubbo 扩展平等的对待内部实现和第三方实现。更多使用场景，参见 &lt;a href="http://static.dubbo.apache.org:8080/zh/docs3-v2/java-sdk/reference-manual/spi/description/">SPI 扩展实现&lt;/a>&lt;/p></description></item></channel></rss>